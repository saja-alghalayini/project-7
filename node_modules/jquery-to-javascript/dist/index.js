var Converter = /** @class */ (function () {
    function Converter() {
    }
    // $("#selector") -> document.getElementById("selector");
    // $("#selector sub-selector") -> document.querySelectorAll("#selector sub-selector");
    Converter.idSelectors = function (input) {
        var pattern = /\$\(\s?('|\")\s?\#([0-9a-zA-Z-_ ]+)\s?('|\")\s?\)/gm;
        return input.replace(pattern, function (match) {
            var regexResult = pattern.exec(match);
            var key = regexResult[2];
            if (key && key.length > 0) {
                if (key.includes(" ")) {
                    return "document.querySelectorAll(\"#" + key + "\")";
                }
                else {
                    return "document.getElementById(\"" + key + "\")";
                }
            }
        });
    };
    // $(".selector") -> document.getElementByClassName("selector");
    // $(".selector sub-selector") -> document.querySelectorAll(".selector sub-selector");
    Converter.classSelectors = function (input) {
        var pattern = /\$\(\s?('|\")\s?\.([0-9a-zA-Z-_\s]+)\s?('|\")\s?\)/gm;
        return input.replace(pattern, function (match) {
            var regexResult = pattern.exec(match);
            var key = regexResult[2];
            if (key && key.length > 0) {
                if (key.includes(" ")) {
                    return "document.querySelectorAll(\"." + key + "\")";
                }
                else {
                    return "document.getElementByClassName(\"" + key + "\")";
                }
            }
        });
    };
    // .html() -> .innerHTML
    // .html(x) -> .innerHTML = x
    Converter.html = function (input) {
        var pattern = /.html\((.*?)\)/gm;
        return input.replace(pattern, function (match) {
            var regexResult = pattern.exec(match);
            var key = regexResult[1];
            var otherKey = regexResult[0];
            if (key && key.length > 0) {
                return ".innerHTML = " + key;
            }
            else if (otherKey && otherKey.length > 0) {
                return ".innerHTML";
            }
        });
    };
    // .text() -> .innerText
    // .text(x) -> .innerText = x
    Converter.text = function (input) {
        var pattern = /.text\((.*?)\)/gm;
        return input.replace(pattern, function (match) {
            var regexResult = pattern.exec(match);
            var key = regexResult[1];
            var otherKey = regexResult[0];
            if (key && key.length > 0) {
                return ".innerText = " + key;
            }
            else if (otherKey && otherKey.length > 0) {
                return ".innerText";
            }
        });
    };
    // .toggleClass(x) -> .classList.toggle(x)
    Converter.toggleClass = function (input) {
        var pattern = /.toggleClass\(('|\")([0-9a-zA-Z-_]+)('|\")\)/gm;
        return input.replace(pattern, function (match) {
            var regexResult = pattern.exec(match);
            var key = regexResult[2];
            return ".classList.toggle(\"" + key + "\")";
        });
    };
    // .addClass(x) -> .classList.add(x)
    Converter.addClass = function (input) {
        var pattern = /.addClass\(('|\")([0-9a-zA-Z-_]+)('|\")\)/gm;
        return input.replace(pattern, function (match) {
            var regexResult = pattern.exec(match);
            var key = regexResult[2];
            return ".classList.add(\"" + key + "\")";
        });
    };
    // .removeClass(x) -> .classList.remove(x)
    Converter.removeClass = function (input) {
        var pattern = /.removeClass\(('|\")([0-9a-zA-Z-_]+)('|\")\)/gm;
        return input.replace(pattern, function (match) {
            var regexResult = pattern.exec(match);
            var key = regexResult[2];
            return ".classList.remove(\"" + key + "\")";
        });
    };
    // .hasClass(x) -> .classList.contains(x)
    Converter.hasClass = function (input) {
        var pattern = /.hasClass\(('|\")([0-9a-zA-Z-_]+)('|\")\)/gm;
        return input.replace(pattern, function (match) {
            var regexResult = pattern.exec(match);
            var key = regexResult[2];
            return ".classList.contains(\"" + key + "\")";
        });
    };
    // .hide() -> .style.display = 'none'
    Converter.hide = function (input) {
        var pattern = /\.hide\(([0-9]+|)\)/gm;
        return input.replace(pattern, function (match) {
            return ".style.display = \"none\"";
        });
    };
    // .hide() -> .style.display = 'none'
    Converter.show = function (input) {
        var pattern = /\.show\(([0-9]+|)\)/gm;
        return input.replace(pattern, function (match) {
            return ".style.display = \"\"";
        });
    };
    // .value() -> .value
    // .value(x) -> .value = x
    Converter.val = function (input) {
        var pattern = /\.val\(([0-9a-zA-Z-_'\"]+|)\)/gm;
        return input.replace(pattern, function (match) {
            var regexResult = pattern.exec(match);
            var key = regexResult[1];
            if (key && key.length > 0) {
                return ".value = " + key;
            }
            else {
                return ".value";
            }
        });
    };
    // .next() -> .nextElementSibling
    Converter.next = function (input) {
        var pattern = /\.next\(\)/gm;
        return input.replace(pattern, function (match) {
            return ".nextElementSibling";
        });
        // @TODO Çoklu seçim eklenecek.
    };
    // .prev() -> .previousElementSibling
    Converter.prev = function (input) {
        var pattern = /\.prev\(\)/gm;
        return input.replace(pattern, function (match) {
            return ".previousElementSibling";
        });
        // @TODO Çoklu seçim eklenecek.
    };
    // .clone() -> .cloneNode(true)
    Converter.clone = function (input) {
        var pattern = /\.clone\(\)/gm;
        return input.replace(pattern, function (match) {
            return ".cloneNode(true)";
        });
    };
    Converter.each = function (input) {
        var pattern = /\$\.each\(\s?(\w+)\s?\,\s?function\s?\((.*?)\)\s?{(.*?)}\s?\)/s;
        return input.replace(pattern, function (match) {
            var regexResult = pattern.exec(match);
            var arrKey = regexResult[1];
            var rawParams = regexResult[2];
            var context = regexResult[3];
            var params = rawParams.replace(' ', '').split(',').reverse().join(', ');
            return arrKey + ".forEach(function(" + params + ") {" + context + "})";
        });
    };
    Converter.convert = function (input, config) {
        var processList = [
            "idSelectors",
            "classSelectors",
            "html",
            "text",
            "toggleClass",
            "addClass",
            "removeClass",
            "hasClass",
            "hide",
            "show",
            "val",
            "next",
            "prev",
            "clone",
            "each",
        ];
        var output = input;
        var excludeList = [];
        if (config && config.exclude && Array.isArray(config.exclude)) {
            excludeList = config.exclude;
        }
        processList.forEach(function (process) {
            if (!excludeList.includes(process)) {
                output = Converter[process](output);
            }
        });
        return output;
    };
    return Converter;
}());
export default Converter;
